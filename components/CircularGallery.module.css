/* components/CircularGallery.module.css */

/* @property definitions for --k and --ang can stay here or in globals.css.
   If in globals.css, you don't need them here. Let's assume they are in globals.css
   as per your provided globals.css. */

/*
@property --k {
	syntax: '<number>';
	initial-value: -1;
	inherits: true;
}

@property --ang {
	syntax: '<angle>';
	initial-value: 0deg;
	inherits: false;
}
*/

/* This is the main fixed wrapper for the gallery */
.galleryWrapper {
  display: grid;
	grid-template-rows: max-content 1fr max-content; /* Header, Main Scene, Footer (support info) */
	position: fixed; /* Takes over the viewport */
	top: 0;
  left: 0;
	width: 100%;
	height: 100vh;
	height: 100dvh;
	color: #dedede;
	font: clamp(.625em, 3vmin, 1.5em)/ 1.25 saira, sans-serif;
  overflow: hidden; /* Important for fixed layout */
  z-index: 10; /* Ensure it's above other page content if necessary, adjust as needed */
}

.galleryWrapper::before { /* Grain effect background */
  position: absolute;
  inset: 0;
  z-index: -1;
  background: #000;
  filter: url(#grain-gallery); /* Ensure SVG filter ID matches */
  content: '';
}

/* Styles for elements within the component */
.galleryHeader, .scene, .assembly,
.galleryArticle, .galleryArticle > header, /* Target direct child header */
.galleryArticle > figure { /* Target direct child figure */
  display: grid;
}

.galleryHeader {
  grid-row: 1; /* Position in .galleryWrapper grid */
	place-content: center;
	place-items: center;
	padding: .5em;
	text-align: center;
	text-wrap: balance;
}

.galleryHeader em {
  max-width: 32em;
}

.scene {
  grid-row: 2; /* Position in .galleryWrapper grid */
	overflow: visible; /* Assembly translates in Z, so scene shouldn't clip it initially */
	perspective: 50em;
  display: grid; /* For place-self on .assembly */
  align-items: center; /* Vertically center .assembly */
  justify-items: center; /* Horizontally center .assembly */
}

.assembly, .galleryArticle {
  transform-style: preserve-3d;
}

.assembly {
  --dir: 0; /* Force horizontal ring mode */
	--r: calc(2 + var(--dir)) / 3; /* Card aspect ratio: 2/3 for horizontal */
	--w: clamp(4em, min(50vh, 25vw), 18em); /* Width of cards */
  /* --n comes from inline style on .galleryWrapper */
	--z: calc(var(--f, 1.25) * -0.5 * var(--w) / tan(0.5turn / var(--n)));
	/* place-self: center; /* .scene handles centering */
	translate: 0 0 var(--z); /* Push the whole assembly back */
  /* --k comes from body's scroll-driven animation (see globals.css) */
	rotate: /* X */var(--dir) /* Y */calc(1 - var(--dir)) /* Z */0 calc((var(--k) + .5) * -1turn);
}
/* Remove media query for --dir to force horizontal:
@media (max-aspect-ratio: 2/3) {
  .assembly {
    --dir: 1;
  }
}
*/

.galleryArticle,
.galleryArticle > header, /* Target direct child */
.galleryArticle > figure, /* Target direct child */
.galleryArticle img,
.galleryArticle figcaption {
  grid-area: 1 / 1; /* All stack in the same grid cell */
}

.galleryArticle {
	/* item progress value */
	--j: calc(var(--i) / var(--n)); /* --i and --n from inline style */
	/* linear difference between this item's progress value
	 * and progress value of highlighted item in front */
	--dif-lin: calc(var(--j) - mod(var(--k) + 1, 1)); /* --k from body */
	/* ... (rest of the --abs-lin, --dif-mid, --abs-mid, --dif-arc, --lim, --sel, --out, --hov calculations) ... */
  --abs-lin: abs(var(--dif-lin));
	--dif-mid: calc(.5 - var(--abs-lin));
	--abs-mid: abs(var(--dif-mid));
	--dif-arc: calc(2*(.5 - var(--abs-mid)));
	--lim: .35;
	--sel: max(0, calc((var(--lim) - var(--dif-arc))/var(--lim)));
	--out: calc(1 - var(--sel));
	--hov: 0;

	width: var(--w); /* from .assembly */
	aspect-ratio: var(--r); /* from .assembly */
	transform:
		rotate3d(var(--dir), calc(1 - var(--dir)), 0, calc(var(--j) * 1turn))
		translatez(var(--z))
		rotate(calc(var(--dir) * 0.5turn)); /* Should be rotate(0) */
}

.galleryArticle > header { /* Target direct child */
  rotate: y calc(var(--hov) * 0.5turn);
}

.galleryArticle:hover, .galleryArticle:focus-within {
  --hov: round(var(--sel));
}

@supports not (scale: abs(-1)) { /* Fallback for abs() */
  .galleryArticle {
    --abs-lin: max(var(--dif-lin), -1*var(--dif-lin));
		--abs-mid: max(var(--dif-mid), -1*var(--dif-mid));
  }
}

.galleryArticle > header, /* Target direct child */
.galleryArticle > figure { /* Target direct child */
	--ang: calc(-45deg + var(--hov) * 180deg); /* --ang is defined by @property */
	overflow: hidden;
	position: relative;
	border: solid 4px #0000;
	border-radius: .5em;
	backface-visibility: hidden;
	box-shadow: 5px 5px 13px #000;
	background:
		var(--url) var(--pos, '50% 50%') / cover padding-box, /* --url and --pos from inline style */
		linear-gradient(#333 0 0) padding-box,
		repeating-conic-gradient(from var(--ang),
				#0000 0% 15%,
				color-mix(in srgb,
					#f48c06 calc(var(--sel)*100%), #333) 20% 30%,
				#0000 35% 50%)
			border-box #121212;
	background-blend-mode: multiply, normal, normal;
	isolation: isolate;
	pointer-events: none;
	transition: .35s ease-out;
	transition-property: rotate, --ang;
}

.galleryArticle > header::after, /* Target direct child */
.galleryArticle > figure::after { /* Target direct child */
  position: absolute;
  inset: 0;
  opacity: var(--out);
  background: #03071e;
  mix-blend-mode: color;
  pointer-events: none;
  content: '';
}

/* reverse from parent */
.galleryArticle h2, .galleryArticle em, .galleryArticle img, .galleryArticle a {
  pointer-events: auto;
}

.galleryArticle h2, .galleryArticle em {
  opacity: round(up, var(--sel));
}

.galleryArticle h2 {
  font-size: 1.125em;
}

.galleryArticle > figure { /* Target direct child */
  rotate: y calc((1 + var(--hov)) * 0.5turn);
}

.galleryArticle img {
	width: 100%;
	height: 100%;
	aspect-ratio: var(--r); /* from .assembly */
	object-fit: cover;
	object-position: var(--pos); /* from inline style */
}

.galleryArticle figcaption {
	align-self: end;
	padding: .5em;
	background: #fff3;
	color: #040404;
	font: Max(.75rem, .75em) caveat, cursive;
	text-align: right;
	text-shadow: 1px 1px 1px #0006;
	backdrop-filter: blur(5px) brightness(1.5);
}

.galleryArticle figcaption a {
  color: #370617;
}

/* Support info */
.supportInfo {
  grid-row: 3; /* Position in .galleryWrapper grid */
  /* position: fixed; /* Not needed if .galleryWrapper is fixed */
	bottom: 0; /* Will be at bottom of fixed .galleryWrapper */
	padding: .5em;
  z-index: 1; /* Above background, below scene if necessary */
  /* background: rgba(0,0,0,0.7); /* Optional for readability */
}

.boxInfoScrollani {
	margin: .5em;
	border-left: solid 5px #dc3055;
	padding: .75em;
	box-shadow: 2px 2px 5px hsla(0, 0%, 0%, .35);
	background: #851d40;
	color: #fff;
	font: 1em/ 1.25 ubuntu, trebuchet ms, arial, sans-serif;
}

/* Check for global scroll timeline support, not local 'self' */
@supports (animation-timeline: scroll()) {
  .boxInfoScrollani {
    display: none;
  }
}

.boxInfoScrollani kbd {
	padding: 2px;
	background: hsla(0, 0%, 0%, .35);
	font: 1.1em/ 1.2 ubuntu mono, consolas, monaco, monospace;
}