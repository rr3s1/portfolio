.aHole {
  /* position: absolute; <--- REMOVE this or change to relative */
  /* top: 0; <--- REMOVE */
  /* left: 0; <--- REMOVE */
  position: relative; /* ADD: To contain its absolutely positioned children */
  
  margin: 0; /* Can keep or adjust for section spacing */
  padding: 0; /* Can keep */
  width: 100%; /* This will make it take the full width of its container in page.tsx */
  
  /* height: 100%; <--- REMOVE this */
  height: 100vh; /* ADD: Define a specific height for the section. Adjust as needed. */
  /* Or you could use a fixed height like: height: 600px; */
  
  overflow: hidden; /* Keep this to clip internal elements if they exceed bounds */
/* Optional: if you want this section to have the dark background.
                                 Otherwise, it will inherit from the body or parent.
                                 The original body style had this, so adding it here
                                 ensures the 'hole' effect works against a dark base. */
}

.aHole:before {
  position: absolute;
  top: 50%;
  left: 50%;
  z-index: 2;
  display: block;
  width: 150%;
  height: 140%;
  background: radial-gradient(ellipse at 50% 55%, transparent 10%, black 50%);
  transform: translate3d(-50%, -50%, 0);
  content: "";
}

.aHole:after {
  position: absolute;
  top: 50%;
  left: 50%;
  z-index: 5;
  display: block;
  width: 100%;
  height: 100%;
  background: radial-gradient(
    ellipse at 50% 75%,
    #a900ff 20%,
    transparent 75%
  );
  mix-blend-mode: overlay;
  transform: translate3d(-50%, -50%, 0);
  content: "";
}

@keyframes aura-glow {
  0% {
    background-position: 0 100%;
  }
  100% {
    background-position: 0 300%;
  }
}

.aura {
  position: absolute;
  top: -71.5%;
  left: 50%;
  z-index: 3;
  width: 30%;
  height: 140%;
  background: linear-gradient(
      20deg,
      #00f8f1,
      #ffbd1e20 16.5%,
      #fe848f 33%,
      #fe848f20 49.5%,
      #00f8f1 66%,
      #00f8f160 85.5%,
      #ffbd1e 100%
    )
    0 100% / 100% 200%;
  border-radius: 0 0 100% 100%;
  filter: blur(50px);
  mix-blend-mode: plus-lighter;
  opacity: 0.75;
  transform: translate3d(-50%, 0, 0);
  animation: aura-glow 5s infinite linear;
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 10;
  width: 100%;
  height: 100%;
  background: repeating-linear-gradient(
    transparent,
    transparent 1px,
    white 1px,
    white 2px
  );
  mix-blend-mode: overlay;
  opacity: 0.5;
}

.jsCanvas {
  display: block;
  width: 100%;
  height: 100%;
}

.fadeCircle {
  /* Make the element the mask’s “source” */
  mask-image: radial-gradient(
    circle at 50% 50%, /* centre */
    rgba(0, 0, 0, 1) 0%, /* fully visible in the centre */
    rgba(0, 0, 0, 1) 40%, /* stay visible for a bit */
    rgba(0, 0, 0, 0) 75% /* fade to transparent by edge */
  );
  mask-mode: alpha; /* use the alpha channel */
  -webkit-mask-image: radial-gradient(
    circle at 50% 50%,
    rgba(0, 0, 0, 1) 0%,
    rgba(0, 0, 0, 1) 40%,
    rgba(0, 0, 0, 0) 75%
  );
  /* Ensure the mask applies correctly to the content */
  /* position: relative; might be needed if children are absolutely positioned
     and need to be contained by the mask, but usually not for a direct canvas child.
  */
}